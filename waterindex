// Water Index Control
// by Firman Raharjo
// Swiss German University

#include <EEPROM.h>
#include "GravityTDS.h"
#include "EasyNextionLibrary.h"
EasyNex myNex(Serial1);

#define BLYNK_TEMPLATE_ID "TMPLHX-EKv4L"
#define BLYNK_TEMPLATE_NAME "Quickstart Template"
#define BLYNK_AUTH_TOKEN "lo9x3XRISiW2hWlKhrdW9s7v8KWBoOrH"
#define BLYNK_PRINT Serial
#define TINY_GSM_MODEM_SIM800
#include <TinyGsmClient.h>
#include <BlynkSimpleTinyGSM.h>
#define SerialAT Serial2
#define TdsSensorPin A1
#define Pushbutton A3
GravityTDS gravityTds;

float temperature = 30, tdsValue = 0;

const int AirValue = 500;   // masukan nilai sebelum kena air
const int WaterValue = 190;  //masukan nilai setelah kerendam air
int CapacitiveValue = A0;
int soilmoisturepercent = 0;

TinyGsm modem(SerialAT);
BlynkTimer timer;
char apn[]  = "internet";
char user[] = "";
char pass[] = "";
const int numReadings = 10;
int readings[numReadings];
int readIndex = 0;
int total = 0;
int average = 0;


int Pump = 4 ;
int WaterValve = 2 ;
int FuelValve = 3;
int Buzzer = A15;


String Spump = "";
String SFuel = "";
String SWater = "";
String datamentah = "";



void setup() {
  Serial.begin(115200);
  myNex.begin(9600);
  SerialAT.begin(9600);

  pinMode(CapacitiveValue, INPUT);
  pinMode(Pushbutton, INPUT);
  pinMode(Pump, OUTPUT);
  pinMode(WaterValve, OUTPUT);
  pinMode(FuelValve, OUTPUT);
  pinMode(Buzzer, OUTPUT);

  digitalWrite(Pump, HIGH);
  digitalWrite(WaterValve, HIGH);
  digitalWrite(FuelValve, HIGH);
  digitalWrite(Buzzer, LOW);

  gravityTds.setPin(TdsSensorPin);
  gravityTds.setAref(5.0);
  gravityTds.setAdcRange(1024);
  gravityTds.begin();

  Serial.println("Initializing modem...");
  myNex.writeStr("notif.txt", "Initializing modem...");
  modem.restart();
  Blynk.begin(BLYNK_AUTH_TOKEN, modem, apn, user, pass);

  // Setup a function to be called every second
  timer.setInterval(1000L, myTimerEvent);

}

void loop() {
  

  CapacitiveValue = analogRead(A0);
  total = total - readings[readIndex];
  readings[readIndex] = CapacitiveValue;
  total = total + readings[readIndex];
  readIndex = readIndex + 1;
  if (readIndex >= numReadings) {
    readIndex = 0;
  }
  average = total / numReadings;
  Serial.println(average);
  Serial.println(CapacitiveValue);
  String datamentah = String(average);
  myNex.writeStr("index.txt", datamentah);
  soilmoisturepercent = map(average, WaterValue, AirValue , 100, 0);

  gravityTds.setTemperature(temperature);  // set the temperature and execute temperature compensation
  gravityTds.update();  //sample and calculate
  tdsValue = gravityTds.getTdsValue();  // then get the value
  Serial.print(tdsValue, 0);
  Serial.println("ppm");
  myNex.writeNum("n1.val", tdsValue);

  if (soilmoisturepercent >= 100)
  {
    Serial.println("100 %");
    myNex.writeNum("n0.val", 100);
  }
  else if (soilmoisturepercent <= 0)
  {
    Serial.println("0 %");
    myNex.writeNum("n0.val", 0);
  }
  else if (soilmoisturepercent > 0 && soilmoisturepercent < 100)
  {
//    Serial.print(soilmoisturepercent);
    String Data = String(soilmoisturepercent);

    myNex.writeNum("n0.val", soilmoisturepercent);
    Serial.println("-------------------" + Data);
  }

  if (soilmoisturepercent >= 70) {
    digitalWrite(Pump, LOW);
    digitalWrite(WaterValve, LOW);
    digitalWrite(FuelValve, LOW);
    myNex.writeStr("pumps.txt", "ON");
    myNex.writeStr("waters.txt", "ON");
    myNex.writeStr("fuels.txt", "OFF");
    myNex.writeStr("notif.txt", "Kandungan Air diatas 70%");
    Spump = "ON";
    SWater = "ON";
    SFuel = "OFF";
    buzer();
  }



  else if (soilmoisturepercent <= 69) {
    digitalWrite(Pump, HIGH);
    digitalWrite(WaterValve, HIGH);
    digitalWrite(FuelValve, LOW);
    myNex.writeStr("pumps.txt", "OFF");
    myNex.writeStr("waters.txt", "OFF");
    myNex.writeStr("fuels.txt", "ON");
    myNex.writeStr("notif.txt", "Kandungan Air kurang dari 70%");
    Spump = "OFF";
    SWater = "OFF";
    SFuel = "ON";
  }
  
  int button = analogRead(Pushbutton);

    if ((soilmoisturepercent <= 69) && (button == LOW)) {
    digitalWrite(Pump, LOW);
    digitalWrite(WaterValve, HIGH);
    digitalWrite(FuelValve, LOW);
    myNex.writeStr("notif.txt", "Manual Switch ON");
    }

    if (tdsValue>=2){
    digitalWrite(Pump, LOW);
    digitalWrite(WaterValve, HIGH);
    digitalWrite(FuelValve, LOW);
    myNex.writeStr("notif.txt", "TDS lebih dari 2 ppm");
    }

    if (tdsValue<=1){
    digitalWrite(Pump, HIGH);
    digitalWrite(WaterValve, HIGH);
    digitalWrite(FuelValve, HIGH);
    myNex.writeStr("notif.txt", "TDS kurang dari 2 ppm");
    } 
    delay(200);
    Blynk.run();
    timer.run();

//    String time = modem.getGSMDateTime(DATE_FULL);
//    Serial.println("Current Network Time:", time);
}

void buzer()
{
  digitalWrite(Buzzer, LOW);
  delay(200);
  digitalWrite(Buzzer, HIGH);
  delay(50);
  digitalWrite(Buzzer, LOW);
}

void myTimerEvent()
{
  Blynk.virtualWrite(V0, CapacitiveValue);
  Blynk.virtualWrite(V1, Spump);
  Blynk.virtualWrite(V2, SWater);
  Blynk.virtualWrite(V3, SFuel);
  Blynk.virtualWrite(V4, soilmoisturepercent);
  Blynk.virtualWrite(V5, tdsValue);

}
